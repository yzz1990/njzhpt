package com.zkzy.njzhpt.bo;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.ggy.common.utils.Param;
import com.ggy.common.utils.SqlAndParam;
import com.ggy.common.utils.SqlUtil;
import com.jfinal.aop.Before;
import com.jfinal.kit.Ret;
import com.jfinal.kit.StrKit;
import com.jfinal.kit.Ret;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.zkzy.framework.kit.UserKit;
import com.zkzy.njzhpt.config.interfaces.ICommond;
import com.zkzy.njzhpt.dao.CangchuglDao;
import com.zkzy.njzhpt.dao.ChengPinLiangDAO;
import com.zkzy.njzhpt.dao.ChuBeiLiangJHDAO;
import com.zkzy.njzhpt.dao.EmergencyDAO;
import com.zkzy.njzhpt.dao.LunHuanGuanLiDAO;
import com.zkzy.njzhpt.dao.QuxuanCommondDao;
import com.zkzy.njzhpt.dao.RenyuanDao;
import com.zkzy.njzhpt.dao.ZhiLiangGLDAO;
import com.zkzy.njzhpt.dao.ZhiliangzsDAO;
import com.zkzy.njzhpt.interceptor.AutoPageInterceptor;
import com.zkzy.njzhpt.dao.ShouchukeshihuaDAO;

public class QuxuanCommondBo implements ICommond {

	@Override
	public Page<Record> findQiyexinxi(HashMap<String, Object> param)
			throws Exception {
		
		return QuxuanCommondDao.findQiyexinxi(param);
	}

	@Override
	@Before(AutoPageInterceptor.class)
	public Page<Record> findDiqu(HashMap<String, Object> param)
			throws Exception {
		return QuxuanCommondDao.findDiqu(param);
	}

	@Override
	public Page<Record> findDiquniandupx(HashMap<String, Object> param)
			throws Exception {
		// TODO Auto-generated method stub
		return QuxuanCommondDao.findDiquniandupx(param);
	}

	@Override
	public Page<Record> chubeilianghuizongb(HashMap<String, Object> map)
			throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		map.put("xzqhdm", re.get("xzqhdm"));
		Page<Record> PageRecord = ChuBeiLiangJHDAO.queryswkc(map);//查询所有的
		double cbljh_xm=0,cbljh_jd=0,cbljh_xd=0,cbljh_xj=0;
		for(Record qykdRecord:PageRecord.getList()){
			String xzqhdm = qykdRecord.getStr("xzqhdm");
			String qyzzjgdm = qykdRecord.getStr("qyzzjgdm");
			String kdbm = qykdRecord.getStr("kdbm");
			Object xingzhi =map.get("xingzhi");
			HashMap<String, Object> param1 = new HashMap<>();
			param1.put("xzqhdm", xzqhdm);
			param1.put("qyzzjgdm", qyzzjgdm);
			param1.put("kdbm", kdbm);
			if(xingzhi!=null){
				param1.put("xingzhi", xingzhi);
			}
			Record cangaosl = ChuBeiLiangJHDAO.findcangaosl(param1);//查询仓廒数量
			qykdRecord.setColumns(cangaosl);
			qykdRecord.set("xingzhi", "");
			/*if(null!=map.get("niandu")){
				param1.put("niandu", map.get("niandu"));
			}
			if(null!=map.get("xingzhi")){
				param1.put("xingzhi", map.get("xingzhi"));
			}
			Record record = ChuBeiLiangJHDAO.findcbljhkudiankcquxian(param1);//统计库点下储备粮计划分品种数量
			qykdRecord.setColumns(record);
			cbljh_xm+=(qykdRecord.getBigDecimal("cbljh_xm").doubleValue());
			cbljh_jd+=(qykdRecord.getBigDecimal("cbljh_jd").doubleValue());
			cbljh_xd+=(qykdRecord.getBigDecimal("cbljh_xd").doubleValue());
			cbljh_xj+=(qykdRecord.getBigDecimal("cbljh_xj").doubleValue());*/
		}
		Ret ret =new Ret().put("list", PageRecord).put("cbljh_xm", cbljh_xm).put("cbljh_jd", cbljh_jd).put("cbljh_xd", cbljh_xd).put("cbljh_xj", cbljh_xj); 
		
		return PageRecord;
	}

	@Override
	public Ret chubeilianghuizongheji(HashMap<String, Object> map)
			throws Exception {
		if(map.get("xzqhdm")==""){
			String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
			Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
			map.put("xzqhdm", re.get("xzqhdm"));
		}
		Ret ret=new Ret();
		Param p = new Param();
		p.put("and quming = ?", "xzqhdm");
		p.put("and ccqy = ?", "qyzzjgdm");
		p.put("and k.kdmc like ?", "kdmc","%%%s%%");
		p.put("and niandu = ?", "niandu");
		p.put("and c.xingzhi = ?", "xingzhi");
		SqlAndParam s = SqlUtil.buildSql(p, map);
		Page<Record> page = Db.paginate(Integer.valueOf(String.valueOf(map.get("page"))),
				Integer.valueOf(String.valueOf(map.get("rows"))), "select sum(cbljh_xm)/1000 as cbljh_xm,SUM(cbljh_jd)/1000 cbljh_jd,sum(cbljh_xd)/1000 cbljh_xd,sum(cbljh_xj)/1000 cbljh_xj ",
				"from njpt_chubeiliangjihua c LEFT JOIN tz_kudian k on c.ccqy=k.qyzzjgdm and c.cckd=k.kdbm where 1=1 " + s.getSql(), s.getParam().toArray(new Object[0]));
			if(page.getList().size()==0){
				return  ret.put("heji",null);
			}else{
				return  ret.put("heji",page.getList().get(0));	
			}
			
		
	}

	@Before(AutoPageInterceptor.class)
	public Page<Record> queryLunHuanShenQing(HashMap<String, Object> map)
			throws Exception {
		Page<Record> lastPageRecord=LunHuanGuanLiDAO.queryLunHuanShenQingQX(map);
		Ret ret = Ret.create("list", lastPageRecord);
		return lastPageRecord;
	}
	
	/**
	 *获取库点实时收购情况
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public Ret queryshishi(HashMap<String, Object> map) throws Exception {
		String xian = UserKit.currentUserInfo().getArea().getString("name");
		HashMap<String,Object> param = map;
		if("请选择".equals(param.get("xian"))){
			param.remove("xian");
		}
		if("请选择".equals(param.get("qyzzjgdm"))){
			param.remove("qyzzjgdm");
		}
		if("请选择".equals(param.get("kdmc"))){
			param.remove("kdmc");
		}
		if("0".equals(param.get("isksh"))){
			param.remove("isksh");
		}
		param.put("xian", xian);
		Page<Record> userPageRecord = ShouchukeshihuaDAO.querykchz(param);
		
		//========================================================
		//获取当前分期
		Date dt = new Date();
		String starttime;
		String endtime;
	    SimpleDateFormat matter1=new SimpleDateFormat("yyyy-MM-dd");
	    String today = matter1.format(dt);
	    String sql = "select starttime , endtime "
	    		+ "from njpt_fenqishangbao "
	    		+ "where convert(date,starttime) <= ? and convert(date,endtime) >= ?";
	    Record recordt = Db.findFirst(sql, today,today);
	    if(recordt == null){
	    	sql = "select starttime , endtime "
		    		+ "from njpt_fenqishangbao "
		    		+ "where convert(date,endtime) <= ? order by endtime desc ";
	    	recordt = Db.findFirst(sql,today);
	    	if(recordt == null){
	    		starttime = "2100-01-01";
		    	endtime = "2000-01-01";	
	    	}else{
	    		starttime = recordt.getStr("starttime");
			    endtime = recordt.getStr("endtime");
	    	}
	    	
	    }else{
	    	starttime = recordt.getStr("starttime");
		    endtime = recordt.getStr("endtime");
	    }
	    
	    System.out.println(starttime);
	    System.out.println(starttime.length());
	    if(StrKit.isBlank(starttime) || starttime.length() != 10){
	    	
	    }
		//=====================================================
		
		int index=1;
		
		for(Record userRecord:userPageRecord.getList()){
			userRecord.set("xuhao",index);
			index++;
			String qiye = userRecord.getStr("qyzzjgdm");
			String kdbm = userRecord.getStr("kdbm");
			HashMap<String, Object> param1 = new HashMap<>();
			param1.put("qiye", qiye);
			param1.put("kdbm", kdbm);
			Record pzkc = ShouchukeshihuaDAO.findzongkucun(param1);
			userRecord.setColumns(pzkc);
			
			HashMap<String, Object> param2 = new HashMap<>();
			param2.put("qiye", qiye);
			param2.put("kdbm", kdbm);
			param2.put("starttime", starttime);
			param2.put("endtime", endtime);
			Record pzrk = ShouchukeshihuaDAO.findzongrk(param2);
			if(pzrk == null){
				pzrk = new Record();
				pzrk.set("sunNW", 0);
			}
			userRecord.setColumns(pzrk);
			String[] lspzbm = {"111","1132","1131"};
			String[] lspz = {"xiaomai","jingdao","xiandao"};
			for(int i = 0; i < lspzbm.length; i++){
				param1.remove("lspzbm");
				param1.remove("lspz");
				param1.put("lspzbm", lspzbm[i]);
				param1.put("lspz",lspz[i]);
				Record record = ShouchukeshihuaDAO.findpzkucun(param1);
				userRecord.setColumns(record);
			}	
		}
		
		Ret ret = Ret.create("list", userPageRecord);
		
		return ret;
	}
	
	
	/**
	 *获取库点库存情况
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public Ret querykchz(HashMap<String, Object> map) throws Exception {
		String xian = UserKit.currentUserInfo().getArea().getString("name");
		HashMap<String,Object> param = map;
		System.out.println("11111");
		if("请选择".equals(param.get("xian"))){
			param.remove("xian");
		}
		if("请选择".equals(param.get("qyzzjgdm"))){
			param.remove("qyzzjgdm");
		}
		if("请选择".equals(param.get("kdmc"))){
			param.remove("kdmc");
		}
		if("0".equals(param.get("isksh"))){
			param.remove("isksh");
		}
		param.put("xian", xian);
		System.out.println("22222");
		Page<Record> userPageRecord = ShouchukeshihuaDAO.querykchz(param);
		
		//========================================================
		//获取当前分期
		Date dt = new Date();
		String starttime;
		String endtime;
	    SimpleDateFormat matter1=new SimpleDateFormat("yyyy-MM-dd");
	    String today = matter1.format(dt);
	    String sql = "select starttime , endtime "
	    		+ "from njpt_fenqishangbao "
	    		+ "where convert(date,starttime) <= ? and convert(date,endtime) >= ?";
	    Record recordt = Db.findFirst(sql, today,today);
	    if(recordt == null){
	    	starttime = "2100-01-01";
	    	endtime = "2000-01-01";	
	    }else{
	    	starttime = recordt.getStr("starttime");
		    endtime = recordt.getStr("endtime");
	    }
	    
	    System.out.println(starttime);
	    System.out.println(starttime.length());
	    if(StrKit.isBlank(starttime) || starttime.length() != 10){
	    	
	    }
		//=====================================================
		
		int index=1;
		
		for(Record userRecord:userPageRecord.getList()){
			userRecord.set("xuhao",index);
			index++;
			String qiye = userRecord.getStr("qyzzjgdm");
			String kdbm = userRecord.getStr("kdbm");
			HashMap<String, Object> param1 = new HashMap<>();
			param1.put("qiye", qiye);
			param1.put("kdbm", kdbm);
			Record pzkc = ShouchukeshihuaDAO.findzongkucun(param1);
			userRecord.setColumns(pzkc);
			
			HashMap<String, Object> param2 = new HashMap<>();
			param2.put("qiye", qiye);
			param2.put("kdbm", kdbm);
			param2.put("starttime", starttime);
			param2.put("endtime", endtime);
			Record pzrk = ShouchukeshihuaDAO.findzongrk(param2);
			if(pzrk == null){
				pzrk = new Record();
				pzrk.set("sunNW", 0);
			}
			userRecord.setColumns(pzrk);
			String[] lspzbm = {"111","1132","1131"};
			String[] lspz = {"xiaomai","jingdao","xiandao"};
			for(int i = 0; i < lspzbm.length; i++){
				param1.remove("lspzbm");
				param1.remove("lspz");
				param1.put("lspzbm", lspzbm[i]);
				param1.put("lspz",lspz[i]);
				Record record = ShouchukeshihuaDAO.findpzkucun(param1);
				userRecord.setColumns(record);
			}	
		}
		
		Ret ret = Ret.create("list", userPageRecord);
		
		return ret;
	}

	@Before(AutoPageInterceptor.class)
	public Page<Record> selectCPLCBJH(HashMap<String, Object> map) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		map.put("quming", re.get("xzqhdm"));
		Page<Record> PageRecord = ChengPinLiangDAO.selectCPLCBJH(map);
		return PageRecord;
	}

	@Override
	public Page<Record> selectZLXQ(HashMap<String, Object> map)
			throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		map.put("xzqhdm", re.get("xzqhdm"));
		Page<Record> PageRecord = ZhiLiangGLDAO.selectZLXQ(map);
		Ret ret = Ret.create("list", PageRecord);
		return PageRecord;
	}

	@Before(AutoPageInterceptor.class)
	public Page<Record> selectlunhuanHZ(HashMap<String, Object> map)
			throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		map.put("szqy", re.get("xzqhdm"));
		Page<Record> list= LunHuanGuanLiDAO.selectlunhuanHZ(map);
		Ret ret = Ret.create("list", list);
		return list;
	}

	
	
	/**
	 * 分页查询企业信息
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public Page<Record> findQiye(HashMap<String, Object> param) throws Exception{
		String xian = UserKit.currentUserInfo().getArea().getString("name");
		param.put("quyu", xian);
		return CangchuglDao.findQiye(param);
	}

	@Override
	public Ret qyTjSh(HashMap<String, Object> map) throws Exception {
		Ret ret=new Ret();
		  
		 int flag= Db.update("update tz_qiye SET status='3' where ID=?",map.get("id"));
		 if(flag>0){
			 ret.put("ret",true); 
		 }else{
			 ret.put("ret",false); 
			 
		 }
		return ret;
	}

	@Override
	public Ret qyTjShBtg(HashMap<String, Object> map) throws Exception {
		Ret ret=new Ret();
		  
		 int flag= Db.update("update tz_qiye SET status='4' where ID=?",map.get("id"));
		 if(flag>0){
			 ret.put("ret",true); 
		 }else{
			 ret.put("ret",false); 
			 
		 }
		return ret;
	}

	/**
	 * 获取企业备案信息
	 * @author njl
	 * @throws Exception 
	 */
	@Before(AutoPageInterceptor.class)
	public Page<Record> findQiyebeian(HashMap<String, Object> param)
			throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("quyu", re.get("xzqhdm"));
		Page<Record> page=RenyuanDao.findQiyebeian(param);
		for(Record record:page.getList()){
			if(record.getStr("shenpiren")!=null){
				Record liucheng=  Db.findFirst("select * from oa_shenpiliucheng where liuchenghao=? and shenpiren=?",record.getStr("liuchengid"),record.getStr("shenpiren"));
				if(liucheng!=null){
					record.set("jiedian", liucheng.getInt("jiedian"));
					Record dep= Db.findFirst("select * from fw_dep  where id=?",liucheng.getStr("shenpibumen"));
					if(dep!=null){
						record.set("depname", dep.getStr("name"));	
					}
				}
			}
		}
		return page;
	}

	/**
	 * 获取熏蒸备案列表
	 * @throws Exception
	 */
	@Before(AutoPageInterceptor.class)
	public Page<Record> findXunzheng(HashMap<String, Object> param) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("quyu", re.get("xzqhdm"));
		Page<Record> page=RenyuanDao.findXunzheng(param);
		for(Record record:page.getList()){
			if(record.getStr("shenpiren")!=null){
				Record liucheng=  Db.findFirst("select * from oa_shenpiliucheng where liuchenghao=? and shenpiren=?",record.getStr("liuchenghao"),record.getStr("shenpiren"));
				if(liucheng!=null){
					
					Record dep= Db.findFirst("select * from fw_dep  where id=?",liucheng.getStr("shenpibumen"));
					
					if(dep!=null){
						record.set("depname", dep.getStr("name"));	
						record.set("jiedian", liucheng.getInt("jiedian"));
					}
				}
			}
		}
		return page;
	}

	/**
	 * 获取药剂备案列表
	 * @throws Exception
	 */
	@Before(AutoPageInterceptor.class)
	public Page<Record> findYaoji(HashMap<String, Object> param) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("quyu", re.get("xzqhdm"));
		Page<Record> page=RenyuanDao.findYaoji(param);
		for(Record record:page.getList()){
			if(record.getStr("shenpiren")!=null){
				Record liucheng=  Db.findFirst("select * from oa_shenpiliucheng where liuchenghao=? and shenpiren=?",record.getStr("liuchenghao"),record.getStr("shenpiren"));
				if(liucheng!=null){
					
					Record dep= Db.findFirst("select * from fw_dep  where id=?",liucheng.getStr("shenpibumen"));
					
					if(dep!=null){
						record.set("depname", dep.getStr("name"));	
						record.set("jiedian", liucheng.getInt("jiedian"));
					}
				}
			}
		}
		return page;
	}

	/**
	 * 药库分页查询
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public Page<Record> findYaoku (HashMap<String, Object> param) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("quyu", re.get("xzqhdm"));
		return CangchuglDao.findYaoku(param);
	}
	
	/**
	 * 遍历库点质量大概
	 * @param map
	 * @return
	 * @throws Exception
	 */
	@Before(AutoPageInterceptor.class)
	public Ret querykudian(HashMap<String, Object> map) throws Exception {
		String xian = UserKit.currentUserInfo().getArea().getString("name");
		map.put("xian", xian);
		Page<Record> userPageRecord = ZhiliangzsDAO.querykudian(map);
		Ret ret = Ret.create("list", userPageRecord);
		return ret;
	}
	
	/**
	 *获取夏粮生产收购预测分期上报
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public Ret queryxialiangyuce(HashMap<String, Object> map) throws Exception {
		String xian = UserKit.currentUserInfo().getArea().getString("name");
		map.put("xian", xian);
		Page<Record> userPageRecord = ShouchukeshihuaDAO.queryxialiangyuce(map);
		Ret ret = Ret.create("list", userPageRecord);
		return ret;
	}
	
	/**
	 *获取秋粮生产收购预测分期上报
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public Ret queryqiuliangyuce(HashMap<String, Object> map) throws Exception {
		String xian = UserKit.currentUserInfo().getArea().getString("name");
		map.put("xian", xian);
		Page<Record> userPageRecord = ShouchukeshihuaDAO.queryqiuliangyuce(map);
		Ret ret = Ret.create("list", userPageRecord);
		return ret;
	}
	
	/**
	 * 获取储备粮计划
	 * @param map
	 * @return
	 * @throws Exception
	 */
	@Before(AutoPageInterceptor.class)
	public Ret shengchenghuizongb(HashMap<String, Object> map) throws Exception {
		String xian = UserKit.currentUserInfo().getArea().getString("name");
		map.put("xian", xian);
		Page<Record> PageRecord = ChuBeiLiangJHDAO.shengchenghuizongb(map);
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}
	
	
	/**
	 * 查询企业安全标准化统计表
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public Page<Record> findanquantj(HashMap<String, Object> param) throws Exception{
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("sb", re.get("xzqhdm"));
		Page<Record> userpage=CangchuglDao.findanquantj(param);
		for(Record page:userpage.getList()){
			Record name=Db.findFirst("SELECT a.name FROM fw_area a LEFT JOIN njpt_diqu b ON a.id=b.areaid WHERE b.xzqhdm=?",page.getStr("sb"));
			page.set("name", name.getStr("name"));
			Record qymc=Db.findFirst("SELECT qymc FROM tz_qiye WHERE qyzzjgdm=?",page.getStr("dbdw"));
			page.set("qymc", qymc.getStr("qymc"));
		}
		return userpage;
	}

	/**
	 * 遍历人口表
	 * @param map
	 * @return
	 * @throws Exception
	 */
	@Before(AutoPageInterceptor.class)
	public Page<Record> queryrenkou(HashMap<String, Object> map) throws Exception {
		map.put("xian", UserKit.currentUserInfo().getArea().getString("name"));
		Page<Record> userPageRecord = EmergencyDAO.queryrenkou(map);
		return userPageRecord;
	}

	@Before(AutoPageInterceptor.class)
	public Page<Record> findshenpiliucheng(HashMap<String, Object> param) throws Exception {
		param.put("shenpibumen", UserKit.currentUserInfo().getDep().getString("id"));
		Page<Record> page=RenyuanDao.findshenpiliucheng(param);
		for(Record record:page.getList()){
			Record dept=Db.findFirst("select * from fw_dep where id=?",record.getStr("shenpibumen"));
			
			record.set("dept", dept.getStr("name"));
			Record user=Db.findFirst("select * from fw_user where id=?",record.getStr("shenpiren"));
			record.set("xingming", user.getStr("realname"));
			if(record.getStr("liuchengtype").equals("0")){
				Record qiye=Db.findFirst("select * from oa_qiyebeian where liuchengid=?",record.getStr("liuchenghao"));
				if(qiye==null){
					record.set("status", "0");
				}else{
					record.set("status", qiye.getStr("status"));
				}
				
			}else if(record.getStr("liuchengtype").equals("1")){
				Record xunzhen=Db.findFirst("select * from oa_xunzhengbeian where liuchenghao=?",record.getStr("liuchenghao"));
				if(xunzhen==null){
					record.set("status", "0");
				}else{
					record.set("status", xunzhen.getStr("status"));
				}
			}else if(record.getStr("liuchengtype").equals("2")){
				Record yaoji=Db.findFirst("select * from oa_yaojibeian where liuchenghao=?",record.getStr("liuchenghao"));
				if(yaoji==null){
					record.set("status", "0");
				}else{
					record.set("status", yaoji.getStr("status"));
				}
				
			}
			
		}
		return page;
	}

	/**
	 * 应急小组的增删改查
	 */
	public Page<Record> findxiaozu(HashMap<String, Object> param) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("xzqhdm", re.get("xzqhdm"));
		Page<Record> userpage=CangchuglDao.findxiaozu(param);
		int index=1;
		for(Record record:userpage.getList()){
			record.set("xuhao", index);
			index++;
		}
		return userpage;
	}

	@Override
	public Ret chakanxiangxich(HashMap<String, Object> map) throws Exception {

		List<Record> cangao= ChuBeiLiangJHDAO.findcangaolist(map);//查询仓廒编码
		for(Record record:cangao){
				map.remove("cfbm");
				map.put("cfbm", record.get("cfbm"));
				String role=(String)UserKit.currentUserInfo().getRole().get("code");
				Record cfpzRecord=new Record();
				cfpzRecord = ChuBeiLiangJHDAO.findcbljhpzkucunquxian(map);
				
				if(cfpzRecord!=null){
					
					record.setColumns(cfpzRecord);
				}
		}
		
		Ret ret = Ret.create("list", new Page<>(cangao, 1, 15, 1, cangao.size()));
		return ret;
	}

	@Override
	public Ret findzongjihua(HashMap<String, Object> param) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("xzqhdm", re.get("xzqhdm"));
		Calendar a=Calendar.getInstance();
		String year= a.get(Calendar.YEAR)+"";
		String sql1 = "select  isnull(sum(jhsl)/1000,0) as jhsl,isnull(sum(cbljh_xm)/1000,0) as xm, isnull(sum(cbljh_jd)/1000,0) as jd,isnull(sum(cbljh_xd)/1000,0) as xd "
				+ " from njpt_chubeiliangjihua where niandu='"+year+"' and quming='"+(String)param.get("xzqhdm")+"' ";
		List<Record> list=Db.find(sql1);
		Ret ret = Ret.create("list", list);
		return	ret;
	}

	@Override
	public Ret findzongkucun(HashMap<String, Object> param) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		param.put("xzqhdm", re.get("xzqhdm"));
		String sql1 = "select b.vGrainSubTypeCode, isnull(sum(b.dmStock),0) as sum from tz_qiye a inner join kc_CurrentStock b on a.qyzzjgdm=b.qyzzjgdm where b.vGrainPropertyCode in (123,122) and a.xzqhdm='"+(String)param.get("xzqhdm")+"' "
				+ "group by vGrainSubTypeCode";
		List<Record> list=Db.find(sql1);
		Ret ret = Ret.create("list",list);
		return ret;
	}

	@Override
	public Ret fenxingzhi(HashMap<String, Object> map) throws Exception {
		// TODO Auto-generated method stub
		Ret ret=new Ret();
		HashMap<String, Object> xz=new HashMap<>();
		xz.put("xingzhibm", "123");
		xz.put("xingzhimc", "县级储备粮");
		return  ret.put(xz);	
	}

	@Override
	@Before(AutoPageInterceptor.class)
	public Ret cbljhrenwu(HashMap<String, Object> queryparam) throws Exception {
		queryparam.put("xingzhi", "123");
		Page<Record> PageRecord = ChuBeiLiangJHDAO.cbljhrenwuzsg(queryparam);
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}

	@Override
	public Ret chubeiliangrenwuheji(HashMap<String, Object> queryparam) throws Exception {
		queryparam.put("xingzhi", "123");
		return ChuBeiLiangJHDAO.chubeiliangrenwuheji(queryparam);
	}

	@Override
	public Ret queryxingzhi(HashMap<String, Object> map) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		map.put("xzqhdm", re.get("xzqhdm"));
		Page<Record> userPageRecord = ShouchukeshihuaDAO.queryxingzhi(map);
		Ret ret = Ret.create("list", userPageRecord);
		return ret;
	}

	@Override
	@Before(AutoPageInterceptor.class)
	public Ret cblswkc(HashMap<String, Object> queryparam) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		queryparam.put("xzqhdm", re.get("xzqhdm"));
		Page<Record> userPageRecord = ChuBeiLiangJHBO.cblswkc(queryparam);
		Ret ret = Ret.create("list", userPageRecord);
		return ret;
	}

	@Override
	public Ret chakankudian(HashMap<String, Object> queryparam) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		queryparam.put("xzqhdm", re.get("xzqhdm"));
		//获取有储备粮计划的企业
		Page<Record> cblqiye=ChuBeiLiangJHDAO.cblqiye(queryparam);
		//for循环企业得到实物库存
		for(Record qiyerecord:cblqiye.getList()){
			//储备粮计划数
			queryparam.put("qyzzjgdm",qiyerecord.get("ccqy"));
			Page<Record> cbljhqiye=ChuBeiLiangJHDAO.cbljhqiye(queryparam);
			if(cbljhqiye.getList().size()>0){
				qiyerecord.setColumns(cbljhqiye.getList().get(0));
			}
			//实际库存数
			String[] pinzhong={"111","1132","1131"};
			String[] pinzhongmc={"shijixm","shijijd","shijixd"};
			BigDecimal xiaoji=new BigDecimal(0);
			for(int i=0;i<3;i++){
				BigDecimal linshiweight=new BigDecimal(0);
				queryparam.put("pinzhong", pinzhong[i]);
				linshiweight=ChuBeiLiangJHDAO.cbljhrenwupzbyqiye(queryparam);
				xiaoji=xiaoji.add(linshiweight);
				qiyerecord.set(pinzhongmc[i], linshiweight);
			}
			qiyerecord.set("shijixj", xiaoji);
			HashMap<String, Object> xjzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xj"),qiyerecord.getBigDecimal("shijixj"),2);
			HashMap<String, Object> xmzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xm"),qiyerecord.getBigDecimal("shijixm"),2);
			HashMap<String, Object> jdzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("jd"),qiyerecord.getBigDecimal("shijijd"),4);
			HashMap<String, Object> xdzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xd"),qiyerecord.getBigDecimal("shijixd"),3);
			qiyerecord.set("xjzb",xjzb.get("zb")).set("xjzbbool", xjzb.get("bool"));
			qiyerecord.set("xmzb",xmzb.get("zb")).set("xmzbbool", xmzb.get("bool"));
			qiyerecord.set("jdzb",jdzb.get("zb")).set("jdzbbool", jdzb.get("bool"));
			qiyerecord.set("xdzb",xdzb.get("zb")).set("xdzbbool", xdzb.get("bool"));
			
			//将查询条件放到每一行里
			qiyerecord.set("niandu", queryparam.get("niandu"));
			qiyerecord.set("xingzhi", queryparam.get("xingzhi"));
			qiyerecord.set("xzqhdm", queryparam.get("xzqhdm"));
			qiyerecord.set("qyzzjgdm",qiyerecord.get("ccqy"));
			qiyerecord.set("kdbm",queryparam.get("kdbm"));
			qiyerecord.set("cfbm",queryparam.get("cfbm"));
			qiyerecord.set("pzclass",queryparam.get("pzclass"));
		}
		Ret ret = Ret.create("list", cblqiye);
		return ret;
		
	}

	@Override
	public Ret chakankudian2(HashMap<String, Object> queryparam) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		queryparam.put("xzqhdm", re.get("xzqhdm"));
		//获取有储备粮计划的企业
				Page<Record> cblqiye=ChuBeiLiangJHDAO.cblkudian(queryparam);
				//for循环企业得到实物库存
				for(Record qiyerecord:cblqiye.getList()){
					//储备粮计划数
					queryparam.put("qyzzjgdm",qiyerecord.get("ccqy"));
					queryparam.put("kdbm",qiyerecord.get("cckd"));
					
					//实际库存数
					String[] pinzhong={"111","1132","1131"};
					String[] pinzhongmc={"shijixm","shijijd","shijixd"};
					BigDecimal xiaoji=new BigDecimal(0);
					for(int i=0;i<3;i++){
						BigDecimal linshiweight=new BigDecimal(0);
						queryparam.put("pinzhong", pinzhong[i]);
						linshiweight=ChuBeiLiangJHDAO.cbljhrenwupzbykudian(queryparam);
						xiaoji=xiaoji.add(linshiweight);
						qiyerecord.set(pinzhongmc[i], linshiweight);
					}
					qiyerecord.set("shijixj", xiaoji);
					HashMap<String, Object> xjzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xj"),qiyerecord.getBigDecimal("shijixj"),2);
					HashMap<String, Object> xmzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xm"),qiyerecord.getBigDecimal("shijixm"),2);
					HashMap<String, Object> jdzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("jd"),qiyerecord.getBigDecimal("shijijd"),4);
					HashMap<String, Object> xdzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xd"),qiyerecord.getBigDecimal("shijixd"),3);
					qiyerecord.set("xjzb",xjzb.get("zb")).set("xjzbbool", xjzb.get("bool"));
					qiyerecord.set("xmzb",xmzb.get("zb")).set("xmzbbool", xmzb.get("bool"));
					qiyerecord.set("jdzb",jdzb.get("zb")).set("jdzbbool", jdzb.get("bool"));
					qiyerecord.set("xdzb",xdzb.get("zb")).set("xdzbbool", xdzb.get("bool"));
					
					//将查询条件放到每一行里
					qiyerecord.set("niandu", queryparam.get("niandu"));
					qiyerecord.set("xingzhi", queryparam.get("xingzhi"));
					qiyerecord.set("xzqhdm", queryparam.get("xzqhdm"));
					qiyerecord.set("qyzzjgdm",qiyerecord.get("ccqy"));
					qiyerecord.set("kdbm",qiyerecord.get("cckd"));
					qiyerecord.set("cfbm",queryparam.get("cfbm"));
					qiyerecord.set("pzclass",queryparam.get("pzclass"));
				}
				Ret ret = Ret.create("list", cblqiye);
				return ret;
	}

	@Override
	public Ret chakancangfang(HashMap<String, Object> queryparam) throws Exception {
		String sql="SELECT a.xzqhdm FROM njpt_diqu a LEFT JOIN fw_area b ON a.areaid=b.id WHERE b.id=?";
		Record re=Db.findFirst(sql,UserKit.currentUserInfo().getArea().getString("id"));
		queryparam.put("xzqhdm", re.get("xzqhdm"));
		//获取有储备粮计划的企业
		Page<Record> cblqiye=ChuBeiLiangJHDAO.cblcangfang(queryparam);
		//for循环企业得到实物库存
		for(Record qiyerecord:cblqiye.getList()){
			//储备粮计划数
			queryparam.put("qyzzjgdm",qiyerecord.get("ccqy"));
			queryparam.put("kdbm",qiyerecord.get("cckd"));
			queryparam.put("cfbm", qiyerecord.get("ccch"));
			//实际库存数
			String[] pinzhong={"111","1132","1131"};
			String[] pinzhongmc={"shijixm","shijijd","shijixd"};
			BigDecimal xiaoji=new BigDecimal(0);
			for(int i=0;i<3;i++){
				BigDecimal linshiweight=new BigDecimal(0);
				queryparam.put("pinzhong", pinzhong[i]);
				linshiweight=ChuBeiLiangJHDAO.cbljhrenwupzbycangfang(queryparam);
				xiaoji=xiaoji.add(linshiweight);
				qiyerecord.set(pinzhongmc[i], linshiweight);
			}
			qiyerecord.set("shijixj", xiaoji);
			HashMap<String, Object> xjzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xj"),qiyerecord.getBigDecimal("shijixj"),2);
			HashMap<String, Object> xmzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xm"),qiyerecord.getBigDecimal("shijixm"),2);
			HashMap<String, Object> jdzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("jd"),qiyerecord.getBigDecimal("shijijd"),4);
			HashMap<String, Object> xdzb=ChuBeiLiangJHDAO.baifenbi(qiyerecord.getBigDecimal("xd"),qiyerecord.getBigDecimal("shijixd"),3);
			qiyerecord.set("xjzb",xjzb.get("zb")).set("xjzbbool", xjzb.get("bool"));
			qiyerecord.set("xmzb",xmzb.get("zb")).set("xmzbbool", xmzb.get("bool"));
			qiyerecord.set("jdzb",jdzb.get("zb")).set("jdzbbool", jdzb.get("bool"));
			qiyerecord.set("xdzb",xdzb.get("zb")).set("xdzbbool", xdzb.get("bool"));
		}
		Ret ret = Ret.create("list", cblqiye);
		return ret;
	}

	

}
