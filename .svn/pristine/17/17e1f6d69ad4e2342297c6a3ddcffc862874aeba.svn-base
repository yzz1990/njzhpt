package com.zkzy.njzhpt.bo;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.jfinal.kit.LogKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

public class updateDdns {
	
	public void uodateDdnsip(){
		List<Record>  records=	Db.use("grainplat").find("select * from nvr");
		for(Record record:records){
			if(!StrKit.isBlank(record.getStr("ddns"))){
				String ip=	resultUrl(record.getStr("ddns"));
				//LogKit.info("============="+regexUrl(ip));
				if(ip!=null){
					
					LogKit.info("============="+ip.split("//")[1]);
				}
				
			}
		}
		
	}
	
	
	/**
     * 获取url返回内容
     * var redirectUrl =  'http://121.237.228.69:50002';
     */
    public static String resultUrl(String path){
    	StringBuilder sbR = new StringBuilder();
    	try {
    		URL url = new URL(path);
    		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    		connection.setInstanceFollowRedirects(false);
    		connection.setConnectTimeout(5000);
    		BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    		String line = br.readLine();
    		while (line != null) {
    			sbR.append(line);
    			line = br.readLine();
    		}
    		String a=sbR.toString();
    		if(a!=null){
    		}
		} catch (Exception e) {
			return path+"连接超时";
		}
        return sbR.toString();
    }
    
    /**
     * 匹配正则
     */
    public static String regexUrl(String str){
    	Pattern p=Pattern.compile("var redirectUrl \\=  \'(.*?)\'");
    	Matcher m=p.matcher(str);
    	String string="";
    	while(m.find()) {
    		System.out.println(m.group(1));//m.group(1)不包括这两个字符
    		string=m.group(1);
        }
    	return str;
    }

}
