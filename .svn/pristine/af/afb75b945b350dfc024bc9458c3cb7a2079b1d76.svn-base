package com.zkzy.njzhpt.bo;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ggy.common.utils.Param;
import com.ggy.common.utils.SqlAndParam;
import com.ggy.common.utils.SqlUtil;
import com.jfinal.aop.Before;
import com.jfinal.kit.LogKit;
import com.jfinal.kit.Ret;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.zkzy.njzhpt.dao.ChuBeiLiangJHDAO;
import com.zkzy.njzhpt.dao.LunHuanGuanLiDAO;
import com.zkzy.njzhpt.dao.ShouchukeshihuaDAO;
import com.zkzy.njzhpt.interceptor.AutoPageInterceptor;

public class ChuBeiLiangJHBO {
	@Before(AutoPageInterceptor.class)
	public Ret shengchenghuizongb(HashMap<String, Object> map) throws Exception {
		Page<Record> PageRecord = ChuBeiLiangJHDAO.shengchenghuizongb(map);
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}
	public Ret chubeilianghuizongheji(HashMap<String, Object> map) throws Exception {
		Ret ret=new Ret();
		Param p = new Param();
		p.put("and quming = ?", "xzqhdm");
		p.put("and ccqy = ?", "qyzzjgdm");
		p.put("and k.kdmc like ?", "kdmc","%%%s%%");
		p.put("and niandu = ?", "niandu");
		SqlAndParam s = SqlUtil.buildSql(p, map);
		Page<Record> page = Db.paginate(Integer.valueOf(String.valueOf(map.get("page"))),
				Integer.valueOf(String.valueOf(map.get("rows"))), "select sum(cbljh_xm)/1000 as cbljh_xm,SUM(cbljh_jd)/1000 cbljh_jd,sum(cbljh_xd)/1000 cbljh_xd,sum(cbljh_xj)/1000 cbljh_xj ",
				"from njpt_chubeiliangjihua c LEFT JOIN tz_kudian k on c.ccqy=k.qyzzjgdm and c.cckd=k.kdbm where 1=1 " + s.getSql(), s.getParam().toArray(new Object[0]));
		return  ret.put("heji",page.getList().get(0));
		
	
	}
	@Before(AutoPageInterceptor.class)
	public Ret chubeilianghuizongb(HashMap<String, Object> map) throws Exception {
		Page<Record> PageRecord = ChuBeiLiangJHDAO.queryswkc(map);//查询所有的
		double cbljh_xm=0,cbljh_jd=0,cbljh_xd=0,cbljh_xj=0;
		for(Record qykdRecord:PageRecord.getList()){
			String xzqhdm = qykdRecord.getStr("xzqhdm");
			String qyzzjgdm = qykdRecord.getStr("qyzzjgdm");
			String kdbm = qykdRecord.getStr("kdbm");
			HashMap<String, Object> param1 = new HashMap<>();
			param1.put("xzqhdm", xzqhdm);
			param1.put("qyzzjgdm", qyzzjgdm);
			param1.put("kdbm", kdbm);
			Record cangaosl = ChuBeiLiangJHDAO.findcangaosl(param1);//查询仓廒数量
			qykdRecord.setColumns(cangaosl);
			if(null!=map.get("niandu")){
				param1.put("niandu", map.get("niandu"));
			}
			if(null!=map.get("xingzhi")){
				param1.put("xingzhi", map.get("xingzhi"));
			}
			Record record = ChuBeiLiangJHDAO.findcbljhkudiankc(param1);//统计库点下储备粮计划分品种数量
			qykdRecord.setColumns(record);
			cbljh_xm+=(qykdRecord.getBigDecimal("cbljh_xm").doubleValue());
			cbljh_jd+=(qykdRecord.getBigDecimal("cbljh_jd").doubleValue());
			cbljh_xd+=(qykdRecord.getBigDecimal("cbljh_xd").doubleValue());
			cbljh_xj+=(qykdRecord.getBigDecimal("cbljh_xj").doubleValue());
		}
		Ret ret =new Ret().put("list", PageRecord).put("cbljh_xm", cbljh_xm).put("cbljh_jd", cbljh_jd).put("cbljh_xd", cbljh_xd).put("cbljh_xj", cbljh_xj); 
		
		return ret;
	}
	@Before(AutoPageInterceptor.class)
	public Ret chakanxiangxich(HashMap<String, Object> map) throws Exception {
		
		List<Record> cangao= ChuBeiLiangJHDAO.findcangaolist(map);//查询仓廒编码
		for(Record record:cangao){
				map.remove("cfbm");
				map.put("cfbm", record.get("cfbm"));
				Record cfpzRecord = ChuBeiLiangJHDAO.findcbljhpzkucun(map);
				if(cfpzRecord!=null){
					
					record.setColumns(cfpzRecord);
				}
		}
		
		Ret ret = Ret.create("list", new Page<>(cangao, 1, 15, 1, cangao.size()));
		return ret;
	}
	@Before(AutoPageInterceptor.class)
	public Ret chakanswkcxiangxich(HashMap<String, Object> map) throws Exception {
		
		List<Record> cangao= ChuBeiLiangJHDAO.findcangaolist(map);//查询仓廒编码
		for(Record record:cangao){
			String[] lspzbm = {"111","1132","1131"};
			String[] lspz = {"xiaomai","jingdao","xiandao"};
			for(int i = 0; i < lspzbm.length; i++){
				map.remove("lspzbm");
				map.remove("lspz");
				map.remove("cfbm");
				map.put("cfbm", record.get("cfbm"));
				map.put("lspzbm", lspzbm[i]);
				map.put("lspz",lspz[i]);
				Record cfpzRecord = ChuBeiLiangJHDAO.findcfpzkucun(map);
				BigDecimal linshi=(BigDecimal)cfpzRecord.get(lspz[i],new BigDecimal(0.0));
				record.set(lspz[i], linshi);
			}
			double xioaji=((BigDecimal)record.get("xiaomai",new BigDecimal(0.0))).doubleValue()+((BigDecimal)record.get("jingdao",new BigDecimal(0.0))).doubleValue()+((BigDecimal)record.get("xiandao",new BigDecimal(0.0))).doubleValue();
			record.set("xiaoji", xioaji);
		}
		
		Ret ret = Ret.create("list", new Page<>(cangao, 1, 15, 1, cangao.size()));
		return ret;
	}
	
	@Before(AutoPageInterceptor.class)
	public Ret queryswkc(HashMap<String, Object> map) throws Exception {
		Page<Record> PageRecord = ChuBeiLiangJHDAO.queryswkc(map);//查询所有的
		for(Record qykdRecord:PageRecord.getList()){
			String qyzzjgdm = qykdRecord.getStr("qyzzjgdm");
			String kdbm = qykdRecord.getStr("kdbm");
			HashMap<String, Object> param1 = new HashMap<>();
			param1.put("qyzzjgdm", qyzzjgdm);
			param1.put("kdbm", kdbm);
			Record cangaosl = ChuBeiLiangJHDAO.findcangaosl(param1);//查询仓廒数量
			qykdRecord.setColumns(cangaosl);
			String[] lspzbm = {"111","1132","1131"};
			String[] lspz = {"xiaomai","jingdao","xiandao"};
			for(int i = 0; i < lspzbm.length; i++){
				param1.remove("lspzbm");
				param1.remove("lspz");
				param1.put("lspzbm", lspzbm[i]);
				param1.put("lspz",lspz[i]);
				Record record = ChuBeiLiangJHDAO.findpzkucun(param1);
				qykdRecord.set(lspz[i], record.get(lspz[i],new BigDecimal(0.0)));
			}
			double xioaji=((BigDecimal)qykdRecord.get("xiaomai",new BigDecimal(0.0))).doubleValue()+((BigDecimal)qykdRecord.get("jingdao",new BigDecimal(0.0))).doubleValue()+((BigDecimal)qykdRecord.get("xiandao",new BigDecimal(0.0))).doubleValue();
			qykdRecord.set("xiaoji", xioaji);
		}
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}
	public Ret fpzECharts(HashMap<String, Object> map) throws Exception {
		Ret ret=new Ret();
		Calendar cal = Calendar.getInstance();
		String nian=(String) map.get("year");
		String month=(String) map.get("month");
		if ((nian==null||nian=="")&&(month==null||month=="")) {
			nian=String.valueOf((cal.get(Calendar.YEAR)));
			month=String.valueOf(((cal.get(Calendar.MONTH))+1));
		}
		int cgldmonth=Integer.valueOf(month);//页面传来的月份
		int cgldyear=Integer.valueOf(nian);//页面传来的年份
		int nowyear=cal.get(Calendar.YEAR);
		int nowmonth=(cal.get(Calendar.MONTH))+1;
		if(cgldmonth<nowmonth||cgldyear<nowyear){
			List<Record> shifoucunzai=Db.find("select * from njpt_shiwukucun_qu where year=? and month=?",nian,month);
			if(shifoucunzai.size()>0){
				ret = Ret.create("list",new Page<>(shifoucunzai, 1, 15, 1, 15));
			}else{
				ret = Ret.create("list", new Page<>(new ArrayList<>(), 1, 15, 1, 15));
			}
		}else{
			List<Record> shifoucunzai=Db.find("select * from njpt_shiwukucun_fpz where year=? and month=?",nian,month);
			if(shifoucunzai.size()>0){
				ret = Ret.create("list", new Page<>(shifoucunzai, 1, 15, 1, 15));
			}else{
				List<Record> list=new ArrayList<>();
				//分品种储备粮计划
				Record cbljh=new Record();
				cbljh=Db.findFirst("select SUM(cbljh_xm) as xm,sum(cbljh_jd) as jd,SUM(cbljh_xd) as xd,sum(cbljh_xj) as xj FROM njpt_chubeiliangjihua where niandu=?",nian);
				//求实物库存
				Record qsxmRrcord = Db.findFirst(
						"select SUM(k.dmStock) as xm from  njpt_diqu d INNER JOIN tz_qiye q on d.xzqhdm=q.xzqhdm inner JOIN kc_CurrentStock k on q.qyzzjgdm=k.qyzzjgdm  and k.vGrainSubTypeCode like '%111%' and k.vGrainPropertyCode in(122,123)");
				Record qsjdRrcord = Db.findFirst(
						"select SUM(k.dmStock) as jd from  njpt_diqu d INNER JOIN tz_qiye q on d.xzqhdm=q.xzqhdm inner JOIN kc_CurrentStock k on q.qyzzjgdm=k.qyzzjgdm  and k.vGrainSubTypeCode like '%1132%' and k.vGrainPropertyCode in(122,123)");
				Record qsxdRrcord = Db.findFirst(
						"select SUM(k.dmStock) as xd from  njpt_diqu d INNER JOIN tz_qiye q on d.xzqhdm=q.xzqhdm inner JOIN kc_CurrentStock k on q.qyzzjgdm=k.qyzzjgdm  and k.vGrainSubTypeCode like '%1131%' and k.vGrainPropertyCode in(122,123)");
				BigDecimal qsxmSWKC = qsxmRrcord.get("xm",new BigDecimal(0.0));
				BigDecimal qsjdSWKC = qsjdRrcord.get("jd",new BigDecimal(0.0));
				BigDecimal qsxdSWKC = qsxdRrcord.get("xd",new BigDecimal(0.0));
				double qsxjSWKC = qsxmSWKC.doubleValue() + qsjdSWKC.doubleValue() + qsxdSWKC.doubleValue();
				//小麦储备粮计划和实物库存
				Record xmjhs=new Record().set("shuliang", cbljh.get("xm")).set("leixing", "jhs");
				Record xmswkc=new Record().set("shuliang", qsxmSWKC).set("leixing", "swkc");
				//粳稻储备粮计划和实物库存
				Record jdjhs=new Record().set("shuliang", cbljh.get("jd")).set("leixing", "jhs");
				Record jdswkc=new Record().set("shuliang", qsjdSWKC).set("leixing", "swkc");
				//籼稻储备粮计划和实物库存
				Record xdjhs=new Record().set("shuliang", cbljh.get("xd")).set("leixing", "jhs");
				Record xdswkc=new Record().set("shuliang", qsxdSWKC).set("leixing", "swkc");
				//总量储备粮计划和实物库存
				Record xjjhs=new Record().set("shuliang", cbljh.get("xj")).set("leixing", "jhs");
				Record xjswkc=new Record().set("shuliang", qsxjSWKC).set("leixing", "swkc");
				list.add(xjjhs);
				list.add(xjswkc);
				list.add(xdjhs);
				list.add(xdswkc);
				list.add(jdjhs);
				list.add(jdswkc);
				list.add(xmjhs);
				list.add(xmswkc);
				ret = Ret.create("list", new Page<>(list, 1, 15, 1, 15));
			}
		}
		return ret;
	}
	/**
	 * 加载实物库存 分品种图表数据
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public Ret quECharts(HashMap<String, Object> map) throws Exception {
		Ret ret=new Ret();
		Calendar cal = Calendar.getInstance();
		String nian=(String) map.get("year");
		String month=(String) map.get("month");
		if (nian==null&&month==null) {
			nian=String.valueOf((cal.get(Calendar.YEAR)));
			month=String.valueOf(((cal.get(Calendar.MONTH))+1));
		}
		int cgldmonth=Integer.valueOf(month);
		int cgldyear=Integer.valueOf(nian);
		int nowyear=cal.get(Calendar.YEAR);
		int nowmonth=(cal.get(Calendar.MONTH))+1;
		if(cgldmonth<nowmonth||cgldyear<nowyear){
			List<Record> shifoucunzai=Db.find("select * from njpt_shiwukucun_qu where year=? and month=?",nian,month);
			if(shifoucunzai.size()>0){
				ret = Ret.create("list",new Page<>(shifoucunzai, 1, 15, 1, 15));
			}else{
				ret = Ret.create("list", new Page<>(new ArrayList<>(), 1, 15, 1, 15));
			}
		}else{
			List<Record> shifoucunzai=Db.find("select * from njpt_shiwukucun_qu where year=? and month=?",nian,month);
			if(shifoucunzai.size()>0){
				ret = Ret.create("list", new Page<>(shifoucunzai, 1, 15, 1, 15));
			}else{
			String niandu=String.valueOf(nowyear);
			List<Record> list=new ArrayList<>();
			//南京市
					Record nanjingshi=ChuBeiLiangJHDAO.nanjingshiEChart(niandu);
					Record nanjinshijhs=new Record()
							.set("leixing", "jhs")
							.set("shuliang", nanjingshi.get("jhsl"));
					Record nanjinshiswkc=new Record()
							.set("leixing", "swkc")
							.set("shuliang", nanjingshi.get("swkc"));
					list.add(nanjinshijhs);
					list.add(nanjinshiswkc);
					
			//区
					String[] qu = { "320115", "320116", "320111", "320124" };// 江宁 六合 浦口 溧水
					for(String xzqhdm:qu){
						Record quRecord=ChuBeiLiangJHDAO.quEChart(xzqhdm,niandu);
						Record qujhs=new Record()
								.set("leixing", "jhs")
								.set("shuliang", quRecord.get("jhsl"));
						Record quswkc=new Record()
								.set("leixing", "swkc")
								.set("shuliang", quRecord.get("swkc"));
						list.add(qujhs);
						list.add(quswkc);
					}
			
			//高淳
					Record gaochunRecord=ChuBeiLiangJHDAO.gaochunEChart(niandu);
					Record gaochunjhs=new Record()
							.set("leixing", "jhs")
							.set("shuliang", gaochunRecord.get("jhsl"));
					Record gaochunswkc=new Record()
							.set("leixing", "swkc")
							.set("shuliang", gaochunRecord.get("swkc"));
					list.add(gaochunjhs);
					list.add(gaochunswkc);
			//其他
					
					Record qitaRecord= ChuBeiLiangJHDAO.qitaEchart(niandu);
					Record qitajhs=new Record()
							.set("leixing", "jhs")
							.set("shuliang", qitaRecord.get("jhsl"));
					Record qitaswkc=new Record()
							.set("leixing", "swkc")
							.set("shuliang", qitaRecord.get("swkc"));
					list.add(qitajhs);
					list.add(qitaswkc);
			//南京市属企业实物库存和储备粮计划
					Record shishuqiyeRecord=ChuBeiLiangJHDAO.shishuqiyeEChart(niandu);
					Record shishujhs=new Record()
							.set("leixing", "jhs")
							.set("shuliang", shishuqiyeRecord.get("jhsl"));
					Record shishuswkc=new Record()
							.set("leixing", "swkc")
							.set("shuliang", shishuqiyeRecord.get("swkc"));
					list.add(shishujhs);
					list.add(shishuswkc);
			
			ret=Ret.create("list",new Page<>(list, 1, 15, 1, 15));
			}
		}
		return ret;
	}
	/**
	 * 保存当前月实物库存 作为结算中心每月的统计数据
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public Ret saveshiwukucun(HashMap<String, Object> map) throws Exception {
		Ret ret=new Ret();
		Calendar cal = Calendar.getInstance();
		//得到当前年度
		int yearInt = cal.get(Calendar.YEAR);
		String year=String.valueOf(yearInt);
		//得到当前month
		int monthInt=cal.get(Calendar.MONTH);
		String month=String.valueOf((monthInt+1));
		HashMap<String, Object> para=new HashMap<>();
		para.put("year", year);
		para.put("month", month);
		boolean succes=Db.tx(new IAtom() {
			
			@Override
			public boolean run() throws SQLException {
				List<Record> shifoucunzai=Db.find("select * from njpt_shiwukucun where year=? and month=?",year,month);
				boolean bool1=false;
				if(shifoucunzai.size()>0){
					for(Record record:shifoucunzai){
						int id=record.getInt("id");
						bool1= Db.deleteById("njpt_shiwukucun", id);
					}
					bool1=saveshiwukucunfangfa(para);
				}else{
					bool1=saveshiwukucunfangfa(para);
				}
				
				return bool1;
			}
		});
		ret.put("ret", succes);
		return ret;
	}
	public static boolean saveshiwukucunfangfa(HashMap<String, Object> map){
		String year=(String) map.get("year");
		String month=(String) map.get("month");
		List<Record> list=new ArrayList<>();
		//查询南京市
		List<Record> qunshiList=quanshi(year); //（格式符合）
		for(Record record:qunshiList){
			list.add(record);
		}
		//南京市属企业(小麦 粳稻 籼稻)
		String[] shishuqyzzjgdm = { "134967560", "660696497" };// 铁心桥粮库  下关粮库
		for (String qyzzjgdm : shishuqyzzjgdm) {
			List<Record> shishu = shishuqiye(qyzzjgdm, year);
			for(Record record:shishu){
				list.add(record);
				
			}
		}
		//南京市属企业（粳稻 籼到）
		List<Record> shishujunliang = qita("660696498", year);//军粮供应站 (格式正确)
			for(Record record:shishujunliang){
				list.add(record);
			}
		//区(小麦 粳稻 籼稻)
		String[] qu = { "320115", "320111", "320116" };// 江宁 浦口 六合  （格式符合）
		for (String xzqhdm : qu) {
			List<Record> quList=quswkc(xzqhdm, year);
			for(Record record:quList){
				if ("320115"==xzqhdm) {
					record.set("qymc", "江宁区粮食购销公司");
				}
				if ("320111"==xzqhdm) {
					record.set("qymc", "浦口区粮食购销公司");
				}
				if ("320116"==xzqhdm) {
					record.set("qymc", "六合区粮食购销公司");
				}
				list.add(record);
			}
		}
		//溧水 高淳
		String[] biedequ = {"320124", "320125"};   //溧水 高淳 (格式符合)
		for(String xzqhdm:biedequ){
			List<Record> gaochunList=gaochun(xzqhdm, year);
			for(Record record:gaochunList){
				if("320124"==xzqhdm){
					record.set("qymc", "溧水区粮食购销公司");
				}
				if("320125"==xzqhdm){
					record.set("qymc", "高淳区粮食购销公司");
				}
				list.add(record);
			}
		}
		
		
		//其他(沙塘庵市场--粳稻)
			List<Record> qitashatangyan = shatangqita("736094548", year);//沙塘庵市场 
			for(Record record:qitashatangyan){
				list.add(record);
			}
		//其他(海悦公司--小麦)	
			List<Record> qitahaiyue = haiyueqita("765432125", year);//海悦公司
			for(Record record:qitahaiyue){
				list.add(record);
			}
		//得到当前年度
		boolean succes= Db.tx(new IAtom() {
			@Override
			public boolean run() throws SQLException {
				// TODO Auto-generated method stub
				boolean bool=false;
				for(Record record:list){
					record.set("year", year);
					record.set("month", month);
					bool=Db.save("njpt_shiwukucun", record);
				}
				return bool;
			}
		});
		return succes;
	}
	public static Ret shiwukucun(HashMap<String, Object> map) throws Exception {
		//TODO  什么鬼？？？你猜
		Ret ret=new Ret();
		Calendar cal = Calendar.getInstance();
		String nian=(String) map.get("year");
		String month=(String) map.get("month");
		if ((nian==null||nian=="")&&(month==null||month=="")) {//初始化时直接查询实时库存
			List<Record> list=new ArrayList<>();
			//得到当前年度
			int yearInt = cal.get(Calendar.YEAR);
			String year=String.valueOf(yearInt);
			//查询南京市
			List<Record> qunshiList=quanshi(year); //（格式符合）
			for(Record record:qunshiList){
				list.add(record);
			}
			//南京市属企业(小麦 粳稻 籼稻)
			String[] shishuqyzzjgdm = { "134967560", "660696497" };// 铁心桥粮库  下关粮库
			for (String qyzzjgdm : shishuqyzzjgdm) {
				List<Record> shishu = shishuqiye(qyzzjgdm, year);
				for(Record record:shishu){
					list.add(record);
					
				}
			}
			//南京市属企业（粳稻 籼到）
			List<Record> shishujunliang = qita("660696498", year);//军粮供应站 (格式正确)
				for(Record record:shishujunliang){
					list.add(record);
				}
			//区(小麦 粳稻 籼稻)
			String[] qu = { "320115", "320111", "320116" };// 江宁 浦口 六合  （格式符合）
			for (String xzqhdm : qu) {
				List<Record> quList=quswkc(xzqhdm, year);
				for(Record record:quList){
					if ("320115"==xzqhdm) {
						record.set("qymc", "江宁区粮食购销公司");
					}
					if ("320111"==xzqhdm) {
						record.set("qymc", "浦口区粮食购销公司");
					}
					if ("320116"==xzqhdm) {
						record.set("qymc", "六合区粮食购销公司");
					}
					list.add(record);
				}
			}
			//溧水 高淳
			String[] biedequ = { "320124", "320125"};   //溧水 高淳 (格式符合)
			for(String xzqhdm:biedequ){
				List<Record> gaochunList=gaochun(xzqhdm, year);
				for(Record record:gaochunList){
					if("320124"==xzqhdm){
						record.set("qymc", "溧水区粮食购销公司");
					}
					if("320125"==xzqhdm){
						record.set("qymc", "高淳区粮食购销公司");
					}
					list.add(record);
				}
			}

			//其他(沙塘庵市场--粳稻)
				List<Record> qitashatangyan = shatangqita("736094548", year);//沙塘庵市场 
				for(Record record:qitashatangyan){
					list.add(record);
				}
			//其他(海悦公司--小麦)	
				List<Record> qitahaiyue = haiyueqita("765432125", year);//海悦公司
				for(Record record:qitahaiyue){
					list.add(record);
				}
			Page<Record> listRecord =new Page<>(list, 1, 15, 1, 15);
			ret = Ret.create("list", listRecord);
		}else {
			List<Record> shifoucunzai=Db.find("select * from njpt_shiwukucun where year=? and month=?",nian,month);
			if(shifoucunzai.size()>0){
				ret = Ret.create("list", new Page<>(shifoucunzai, 1, 15, 1, 15));
			}else{
				ret = Ret.create("list", new Page<>(new ArrayList<>(), 1, 15, 1, 15));
			}
		}
		return ret;
	}
	/**
	 * 生成 其他(沙塘堰) 实物库存整条信息（储备粮计划，实物库存，占比）
	 */
	public static List<Record> haiyueqita(String qyzzjgdm,String year){
		List<Record> qitaList=new ArrayList<>();
		Record qitaRecord=ChuBeiLiangJHDAO.haiyueqita(qyzzjgdm, year);
	
		Record jd=new Record().set("quming", "其他")
				.set("qymc",  "海悦公司")
				.set("pz", "小麦")
				.set("cbljh", qitaRecord.get("xmcbljh"))
				.set("swkc", qitaRecord.get("xmswkc"))
				.set("sjkczb", qitaRecord.get("sjkczb"))
				.set("sjkczbbool", qitaRecord.get("sjkczbbool"))
				.set("sjjdzb", qitaRecord.get("sjjdzb"))
				.set("sjjdzbbool", qitaRecord.get("sjjdzbbool"))
				.set("sjxdzb", qitaRecord.get("sjxdzb"))
				.set("sjxdzbbool", qitaRecord.get("sjxdzbbool"))
				.set("sjxmzb", qitaRecord.get("sjxmzb"))
				.set("sjxmzbbool", qitaRecord.get("sjxmzbbool"));
		
		qitaList.add(jd);
		return qitaList;
	}
	/**
	 * 生成 其他(沙塘堰) 实物库存整条信息（储备粮计划，实物库存，占比）
	 */
	public static List<Record> shatangqita(String qyzzjgdm,String year){
		List<Record> qitaList=new ArrayList<>();
		Record qitaRecord=ChuBeiLiangJHDAO.shatangqita(qyzzjgdm, year);
	
		Record jd=new Record().set("quming", "其他")
				.set("qymc",  qitaRecord.get("qymc"))
				.set("pz", "粳稻")
				.set("cbljh", qitaRecord.get("jdcbljh"))
				.set("swkc", qitaRecord.get("jdswkc"))
				.set("sjkczb", qitaRecord.get("sjkczb"))
				.set("sjkczbbool", qitaRecord.get("sjkczbbool"))
				.set("sjjdzb", qitaRecord.get("sjjdzb"))
				.set("sjjdzbbool", qitaRecord.get("sjjdzbbool"))
				.set("sjxdzb", qitaRecord.get("sjxdzb"))
				.set("sjxdzbbool", qitaRecord.get("sjxdzbbool"))
				.set("sjxmzb", qitaRecord.get("sjxmzb"))
				.set("sjxmzbbool", qitaRecord.get("sjxmzbbool"));
		
		qitaList.add(jd);
		return qitaList;
	}
	/**
	 * 生成 其他 实物库存整条信息（储备粮计划，实物库存，占比）
	 */
	public static List<Record> qita(String qyzzjgdm,String year){
		List<Record> qitaList=new ArrayList<>();
		Record qitaRecord=ChuBeiLiangJHDAO.qitashiwukucun(qyzzjgdm, year);
		Record heji=new Record().set("quming", "市属企业")
				.set("qymc", "军粮供应站")
				.set("pz", "小计")
				.set("cbljh", qitaRecord.get("xjcbljh"))
				.set("swkc", qitaRecord.get("xjswkc"))
				.set("sjkczb", qitaRecord.get("sjkczb"))
				.set("sjkczbbool", qitaRecord.get("sjkczbbool"))
				.set("sjjdzb", qitaRecord.get("sjjdzb"))
				.set("sjjdzbbool", qitaRecord.get("sjjdzbbool"))
				.set("sjxdzb", qitaRecord.get("sjxdzb"))
				.set("sjxdzbbool", qitaRecord.get("sjxdzbbool"))
				.set("sjxmzb", qitaRecord.get("sjxmzb"))
				.set("sjxmzbbool", qitaRecord.get("sjxmzbbool"));
		Record jd=new Record().set("quming", "市属企业")
				.set("qymc",  "军粮供应站")
				.set("pz", "粳稻")
				.set("cbljh", qitaRecord.get("jdcbljh"))
				.set("swkc", qitaRecord.get("jdswkc"))
				.set("sjkczb", qitaRecord.get("sjkczb"))
				.set("sjkczbbool", qitaRecord.get("sjkczbbool"))
				.set("sjjdzb", qitaRecord.get("sjjdzb"))
				.set("sjjdzbbool", qitaRecord.get("sjjdzbbool"))
				.set("sjxdzb", qitaRecord.get("sjxdzb"))
				.set("sjxdzbbool", qitaRecord.get("sjxdzbbool"))
				.set("sjxmzb", qitaRecord.get("sjxmzb"))
				.set("sjxmzbbool", qitaRecord.get("sjxmzbbool"));
		Record xd=new Record().set("quming", "市属企业")
				.set("qymc",  "军粮供应站")
				.set("pz", "籼稻")
				.set("cbljh", qitaRecord.get("xdcbljh"))
				.set("swkc", qitaRecord.get("xdswkc"))
				.set("sjkczb", qitaRecord.get("sjkczb"))
				.set("sjkczbbool", qitaRecord.get("sjkczbbool"))
				.set("sjjdzb", qitaRecord.get("sjjdzb"))
				.set("sjjdzbbool", qitaRecord.get("sjjdzbbool"))
				.set("sjxdzb", qitaRecord.get("sjxdzb"))
				.set("sjxdzbbool", qitaRecord.get("sjxdzbbool"))
				.set("sjxmzb", qitaRecord.get("sjxmzb"))
				.set("sjxmzbbool", qitaRecord.get("sjxmzbbool"));
		qitaList.add(heji);
		qitaList.add(jd);
		qitaList.add(xd);
		return qitaList;
	}
	/**
	 * 生成高淳实物库存整条信息（储备粮计划，实物库存，占比）
	 */
	public static List<Record> gaochun(String xzqhdm,String year){
		List<Record> gaochunList=new ArrayList<>();
		Record gaochunRecord=ChuBeiLiangJHDAO.gaochunShiWuKuCun(xzqhdm, year);
		Record jd=new Record().set("quming", gaochunRecord.get("quming"))
				.set("qymc", "")
				.set("pz", "粳稻")
				.set("cbljh", gaochunRecord.get("jdcbljh"))
				.set("swkc", gaochunRecord.get("jdswkc"))
				.set("sjkczb", gaochunRecord.get("sjkczb"))
				.set("sjkczbbool", gaochunRecord.get("sjkczbbool"))
				.set("sjjdzb", gaochunRecord.get("sjjdzb"))
				.set("sjjdzbbool", gaochunRecord.get("sjjdzbbool"))
				.set("sjxdzb", gaochunRecord.get("sjxdzb"))
				.set("sjxdzbbool", gaochunRecord.get("sjxdzbbool"))
				.set("sjxmzb", gaochunRecord.get("sjxmzb"))
				.set("sjxmzbbool", gaochunRecord.get("sjxmzbbool"));
		
		gaochunList.add(jd);
		return gaochunList;
	}
	/**
	 * 生成区实物库存整条信息（储备粮计划，实物库存，占比）（高淳除外）
	 */
	public static List<Record> quswkc(String xzqhdm,String year){
		List<Record> quList=new ArrayList<>();
		Record quRecord=ChuBeiLiangJHDAO.quShiWuKuCun(xzqhdm,year);
		Record heji=new Record().set("quming", quRecord.get("quming"))
				.set("qymc", "")
				.set("pz", "小计")
				.set("cbljh", quRecord.get("xjcbljh"))
				.set("swkc", quRecord.get("xjswkc"))
				.set("sjkczb", quRecord.get("sjkczb"))
				.set("sjkczbbool", quRecord.get("sjkczbbool"))
				.set("sjjdzb", quRecord.get("sjjdzb"))
				.set("sjjdzbbool", quRecord.get("sjjdzbbool"))
				.set("sjxdzb", quRecord.get("sjxdzb"))
				.set("sjxdzbbool", quRecord.get("sjxdzbbool"))
				.set("sjxmzb", quRecord.get("sjxmzb"))
				.set("sjxmzbbool", quRecord.get("sjxmzbbool"));
		Record xm=new Record().set("quming", quRecord.get("quming"))
				.set("qymc", "")
				.set("pz", "小麦")
				.set("cbljh", quRecord.get("xmcbljh"))
				.set("swkc", quRecord.get("xmswkc"))
				.set("sjkczb", quRecord.get("sjkczb"))
				.set("sjkczbbool", quRecord.get("sjkczbbool"))
				.set("sjjdzb", quRecord.get("sjjdzb"))
				.set("sjjdzbbool", quRecord.get("sjjdzbbool"))
				.set("sjxdzb", quRecord.get("sjxdzb"))
				.set("sjxdzbbool", quRecord.get("sjxdzbbool"))
				.set("sjxmzb", quRecord.get("sjxmzb"))
				.set("sjxmzbbool", quRecord.get("sjxmzbbool"));
		Record jd=new Record().set("quming", quRecord.get("quming"))
				.set("qymc", "")
				.set("pz", "粳稻")
				.set("cbljh", quRecord.get("jdcbljh"))
				.set("swkc", quRecord.get("jdswkc"))
				.set("sjkczb", quRecord.get("sjkczb"))
				.set("sjkczbbool", quRecord.get("sjkczbbool"))
				.set("sjjdzb", quRecord.get("sjjdzb"))
				.set("sjjdzbbool", quRecord.get("sjjdzbbool"))
				.set("sjxdzb", quRecord.get("sjxdzb"))
				.set("sjxdzbbool", quRecord.get("sjxdzbbool"))
				.set("sjxmzb", quRecord.get("sjxmzb"))
				.set("sjxmzbbool", quRecord.get("sjxmzbbool"));
		Record xd=new Record().set("quming", quRecord.get("quming"))
				.set("qymc", "")
				.set("pz", "籼稻")
				.set("cbljh", quRecord.get("xdcbljh"))
				.set("swkc", quRecord.get("xdswkc"))
				.set("sjkczb", quRecord.get("sjkczb"))
				.set("sjkczbbool", quRecord.get("sjkczbbool"))
				.set("sjjdzb", quRecord.get("sjjdzb"))
				.set("sjjdzbbool", quRecord.get("sjjdzbbool"))
				.set("sjxdzb", quRecord.get("sjxdzb"))
				.set("sjxdzbbool", quRecord.get("sjxdzbbool"))
				.set("sjxmzb", quRecord.get("sjxmzb"))
				.set("sjxmzbbool", quRecord.get("sjxmzbbool"));
		quList.add(heji);
		quList.add(xm);
		quList.add(jd);
		quList.add(xd);
		return quList;
		
	}
	/**
	 * 生成市属企业实物库存整条信息（储备粮计划，实物库存，占比）
	 */
	public static List<Record> shishuqiye(String qyzzjgdm,String year){
		List<Record> shishuList=new ArrayList<>();
		Record shishu=ChuBeiLiangJHDAO.shishuqiyeshiwukucun(qyzzjgdm,year);
		
		Record heji=new Record().set("quming", "市属企业")
				.set("qymc",shishu.get("qymc"))
				.set("pz", "小计")
				.set("cbljh", shishu.get("xjcbljh"))
				.set("swkc", shishu.get("xjswkc"))
				.set("sjkczb", shishu.get("sjkczb"))
				.set("sjkczbbool", shishu.get("sjkczbbool"))
				.set("sjjdzb", shishu.get("sjjdzb"))
				.set("sjjdzbbool", shishu.get("sjjdzbbool"))
				.set("sjxdzb", shishu.get("sjxdzb"))
				.set("sjxdzbbool", shishu.get("sjxdzbbool"))
				.set("sjxmzb", shishu.get("sjxmzb"))
				.set("sjxmzbbool", shishu.get("sjxmzbbool"));
		Record xm=new Record().set("quming", "市属企业")
				.set("qymc", shishu.get("qymc"))
				.set("pz", "小麦")
				.set("cbljh", shishu.get("xmcbljh"))
				.set("swkc", shishu.get("xmswkc"))
				.set("sjkczb", shishu.get("sjkczb"))
				.set("sjkczbbool", shishu.get("sjkczbbool"))
				.set("sjjdzb", shishu.get("sjjdzb"))
				.set("sjjdzbbool", shishu.get("sjjdzbbool"))
				.set("sjxdzb", shishu.get("sjxdzb"))
				.set("sjxdzbbool", shishu.get("sjxdzbbool"))
				.set("sjxmzb", shishu.get("sjxmzb"))
				.set("sjxmzbbool", shishu.get("sjxmzbbool"));
		Record jd=new Record().set("quming", "市属企业")
				.set("qymc", shishu.get("qymc"))
				.set("pz", "粳稻")
				.set("cbljh", shishu.get("jdcbljh"))
				.set("swkc", shishu.get("jdswkc"))
				.set("sjkczb", shishu.get("sjkczb"))
				.set("sjkczbbool", shishu.get("sjkczbbool"))
				.set("sjjdzb", shishu.get("sjjdzb"))
				.set("sjjdzbbool", shishu.get("sjjdzbbool"))
				.set("sjxdzb", shishu.get("sjxdzb"))
				.set("sjxdzbbool", shishu.get("sjxdzbbool"))
				.set("sjxmzb", shishu.get("sjxmzb"))
				.set("sjxmzbbool", shishu.get("sjxmzbbool"));
		Record xd=new Record().set("quming", "市属企业")
				.set("qymc", shishu.get("qymc"))
				.set("pz", "籼稻")
				.set("cbljh", shishu.get("xdcbljh"))
				.set("swkc", shishu.get("xdswkc"))
				.set("sjkczb", shishu.get("sjkczb"))
				.set("sjkczbbool", shishu.get("sjkczbbool"))
				.set("sjjdzb", shishu.get("sjjdzb"))
				.set("sjjdzbbool", shishu.get("sjjdzbbool"))
				.set("sjxdzb", shishu.get("sjxdzb"))
				.set("sjxdzbbool", shishu.get("sjxdzbbool"))
				.set("sjxmzb", shishu.get("sjxmzb"))
				.set("sjxmzbbool", shishu.get("sjxmzbbool"));
		shishuList.add(heji);
		shishuList.add(xm);
		shishuList.add(jd);
		shishuList.add(xd);
		return shishuList;
		
	}
	/**
	 * 生成实物库存整条信息（储备粮计划，实物库存，占比）
	 */
	public static List<Record> quanshi(String year){
		List<Record> quanshiList=new ArrayList<>();
		Record quanshi=ChuBeiLiangJHDAO.quanshi(year);
		
		Record heji=new Record().set("quming", "南京市")
				.set("qymc", "")
				.set("pz", "合计")
				.set("cbljh", quanshi.get("xjcbljh"))
				.set("swkc", quanshi.get("xjswkc"))
				.set("sjkczb", quanshi.get("sjkczb"))
				.set("sjkczbbool", quanshi.get("sjkczbbool"))
				.set("sjjdzb", quanshi.get("sjjdzb"))
				.set("sjjdzbbool", quanshi.get("sjjdzbbool"))
				.set("sjxdzb", quanshi.get("sjxdzb"))
				.set("sjxdzbbool", quanshi.get("sjxdzbbool"))
				.set("sjxmzb", quanshi.get("sjxmzb"))
				.set("sjxmzbbool", quanshi.get("sjxmzbbool"));
		Record xm=new Record().set("quming", "南京市")
				.set("qymc", "")
				.set("pz", "小麦")
				.set("cbljh", quanshi.get("xmcbljh"))
				.set("swkc", quanshi.get("xmswkc"))
				.set("sjkczb", quanshi.get("sjkczb"))
				.set("sjkczbbool", quanshi.get("sjkczbbool"))
				.set("sjjdzb", quanshi.get("sjjdzb"))
				.set("sjjdzbbool", quanshi.get("sjjdzbbool"))
				.set("sjxdzb", quanshi.get("sjxdzb"))
				.set("sjxdzbbool", quanshi.get("sjxdzbbool"))
				.set("sjxmzb", quanshi.get("sjxmzb"))
				.set("sjxmzbbool", quanshi.get("sjxmzbbool"));
		Record jd=new Record().set("quming", "南京市")
				.set("qymc", "")
				.set("pz", "粳稻")
				.set("cbljh", quanshi.get("jdcbljh"))
				.set("swkc", quanshi.get("jdswkc"))
				.set("sjkczb", quanshi.get("sjkczb"))
				.set("sjkczbbool", quanshi.get("sjkczbbool"))
				.set("sjjdzb", quanshi.get("sjjdzb"))
				.set("sjjdzbbool", quanshi.get("sjjdzbbool"))
				.set("sjxdzb", quanshi.get("sjxdzb"))
				.set("sjxdzbbool", quanshi.get("sjxdzbbool"))
				.set("sjxmzb", quanshi.get("sjxmzb"))
				.set("sjxmzbbool", quanshi.get("sjxmzbbool"));
		Record xd=new Record().set("quming", "南京市")
				.set("qymc", "")
				.set("pz", "籼稻")
				.set("cbljh", quanshi.get("xdcbljh"))
				.set("swkc", quanshi.get("xdswkc"))
				.set("sjkczb", quanshi.get("sjkczb"))
				.set("sjkczbbool", quanshi.get("sjkczbbool"))
				.set("sjjdzb", quanshi.get("sjjdzb"))
				.set("sjjdzbbool", quanshi.get("sjjdzbbool"))
				.set("sjxdzb", quanshi.get("sjxdzb"))
				.set("sjxdzbbool", quanshi.get("sjxdzbbool"))
				.set("sjxmzb", quanshi.get("sjxmzb"))
				.set("sjxmzbbool", quanshi.get("sjxmzbbool"));
		quanshiList.add(heji);
		quanshiList.add(xm);
		quanshiList.add(jd);
		quanshiList.add(xd);
		return quanshiList;
		
	}
	public Ret bianji(HashMap<String, Object> map) throws Exception {
		
		boolean bool= ChuBeiLiangJHDAO.bianji(map);
		Ret ret = Ret.create("ret", bool);
		return ret;
	}
	@Before(AutoPageInterceptor.class)
	public Ret selectCBLJHHZ(HashMap<String, Object> map) throws Exception {	
		Page<Record> PageRecord = ChuBeiLiangJHDAO.selectCBLJHHZ(map);
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}
	@Before(AutoPageInterceptor.class)
	public Ret selectCBLJH(HashMap<String, Object> map) throws Exception {
		Page<Record> PageRecord = ChuBeiLiangJHDAO.selectCBLJH(map);
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}
	@Before(AutoPageInterceptor.class)
	public Ret chakanCBLJH(HashMap<String, Object> map) throws Exception {
		
		Page<Record> PageRecord = ChuBeiLiangJHDAO.chakanCBLJH(map);
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}
	@Before(AutoPageInterceptor.class)
	public Ret liebiaoSWKC(HashMap<String, Object> map) throws Exception {
		
		Page<Record> PageRecord = ChuBeiLiangJHDAO.liebiaoSWKC(map);
		Ret ret = Ret.create("list", PageRecord);
		return ret;
	}
	
	public Ret saveCBLJH(HashMap<String, Object> map) throws Exception {
		
		boolean bool= ChuBeiLiangJHDAO.saveCBLJH(map);
		Ret ret = Ret.create("ret", bool);
		return ret;
	}
	public Ret saveQYCBLJH(HashMap<String, Object> map) throws Exception {
		
		boolean bool= ChuBeiLiangJHDAO.saveQYCBLJH(map);
		Ret ret = Ret.create("ret", bool);
		return ret;
	}
}
