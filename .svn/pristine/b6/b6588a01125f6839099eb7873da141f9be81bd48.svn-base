package com.zkzy.njzhpt.dao;

import java.util.HashMap;
import java.util.List;

import com.ggy.common.utils.Param;
import com.ggy.common.utils.SqlAndParam;
import com.ggy.common.utils.SqlUtil;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

public class JibenxinxiDao {
	
	/**
	 * 分页查询企业信息
	 * @param queryparam
	 * @return
	 * @throws Exception
	 */
	public static Page<Record> findQiyexinxi(HashMap<String, Object> queryparam) throws Exception{
		Param p = new Param();
		p.put("and a.ID = ?", "ID");
		p.put("and a.qyzzjgdm = ?", "qyzzjgdm");
		p.put("and a.xian = ?", "xian");
		p.put("and a.qymc = ?", "qymc");
		p.put("and a.qyxzmc = ?", "qyxzmc");
		p.put("and a.jyywlxbh = ?", "jyywlxbh");
		SqlAndParam s = SqlUtil.buildSql(p, queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select a.*,c.loginname as loginname,c.password as password ",
				"from tz_qiye a left JOIN fw_user_dep b on a.ID=b.depid left JOIN fw_user c on c.id=b.userid LEFT JOIN fw_dep d  on b.depid=d.id LEFT JOIN fw_area e on d.areaid=e.id where 1=1  " + s.getSql() + " ORDER BY e.orderno ", 
				s.getParam().toArray(new Object[0]));
		return page;
	}
	
	/**
	 * 分页查询地区信息
	 * @param queryparam
	 * @return
	 * @throws Exception
	 */
	public static Page<Record> findDiqu(HashMap<String, Object> queryparam) throws Exception{
		Param p = new Param();
		p.put("and b.id = ?", "id");
		p.put("and b.areaid = ?", "areaid");
		p.put("and b.xzqhdm = ?", "xzqhdm");
		SqlAndParam s = SqlUtil.buildSql(p, queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select b.*,a.name",
				" from fw_area a LEFT JOIN njpt_diqu b on a.id=b.areaid where a.parentid!='root' " + s.getSql() + " ORDER BY a.orderno", 
				s.getParam().toArray(new Object[0]));
		return page;
	}
	
	
	/**
	 * 分页查询地区年度信息
	 * @param queryparam
	 * @return
	 * @throws Exception
	 */
	public static Page<Record> findDiquniandu(HashMap<String, Object> queryparam) throws Exception{
		Param p = new Param();
		p.put("and id = ?", "id");
		p.put("and quyu = ?", "quyu");
		p.put("and niandu = ?", "niandu");
		SqlAndParam s = SqlUtil.buildSql(p, queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select *",
				"from njpt_diquniandu where 1=1" + s.getSql() + "order by niandu desc, quyu desc", 
				s.getParam().toArray(new Object[0]));
		return page;
	}
	
	/**
	 * 排序查询区县年度
	 * @param param
	 * @return
	 * @throws Exception 
	 */
	public static Page<Record> findDiquniandupx(HashMap<String, Object> queryparam) throws Exception {
		// TODO Auto-generated method stub
		Param p = new Param();
		p.put("and nd.id = ?", "id");
		p.put("and nd.quyu = ?", "quyu");
		p.put("and nd.niandu = ?", "niandu");
		SqlAndParam s = SqlUtil.buildSql(p,queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select nd.*",
				"from njpt_diquniandu as nd left join "
				+ "njpt_diqu as dq on nd.xzqhdm = dq.xzqhdm left join fw_area as area "
				+ "on dq.areaid = area.id  where 1=1" + s.getSql() + "order by nd.niandu desc, area.orderno", 
				s.getParam().toArray(new Object[0]));
		return page;
	}
	
	
	/**
	 * 分页查询库点信息
	 * @param queryparam
	 * @return
	 * @throws Exception
	 */
	public static Page<Record> findKudian(HashMap<String, Object> queryparam) throws Exception{
		Param p = new Param();
		p.put("and ID = ?", "ID");
		p.put("and qyzzjgdm = ?", "qyzzjgdm");
		p.put("and kdbm = ?", "kdbm");
		p.put("and kdlxbh = ?", "kdlxbh");
		SqlAndParam s = SqlUtil.buildSql(p, queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select *",
				"from tz_kudian where 1=1" + s.getSql(), 
				s.getParam().toArray(new Object[0]));
		return page;
	}
	
	/**
	 * 查询地区
	 * @return
	 */
	public List<Record> finddiqu() {
		String sql = "select quyu from njpt_diqu order by orderno";
		List<Record> list = Db.find(sql);
		return list;
	}
	
	/**
	 * 分页查询仓房
	 * @param queryparam
	 * @return
	 * @throws Exception
	 */
	public static Page<Record> findCangfang(HashMap<String, Object> queryparam) throws Exception{
		Param p = new Param();
		p.put("and ID = ?", "ID");
		p.put("and qyzzjgdm = ?", "qyzzjgdm");
		p.put("and kdbm = ?", "kdbm");
		p.put("and cfbm = ?", "cfbm");
		
		SqlAndParam s = SqlUtil.buildSql(p, queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select *",
				"from tz_cangfang where 1=1 " + s.getSql()+ "ORDER BY cfbm", 
				s.getParam().toArray(new Object[0]));
		return page;
	}

	/**
	 * 分页查询廒间
	 * @param queryparam
	 * @return
	 * @throws Exception
	 */
	public static Page<Record> findAojian(HashMap<String, Object> queryparam) throws Exception{
		Param p = new Param();
		p.put("and ID = ?", "ID");
		p.put("and qyzzjgdm = ?", "qyzzjgdm");
		p.put("and kdbm = ?", "kdbm");
		p.put("and cfbm = ?", "cfbm");
		
		SqlAndParam s = SqlUtil.buildSql(p, queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select *",
				"from tz_aojian where 1=1" + s.getSql() + "ORDER BY cfbm , ajbh", 
				s.getParam().toArray(new Object[0]));
		return page;
	}

	
	/**
	 * 获取用户信息
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public static Page<Record> findUserInfo(HashMap<String, Object> queryparam) throws Exception {
		Param p = new Param();
		p.put("and a.id = ?", "id");
		p.put("and a.loginname = ?", "loginname");
		p.put("and b.depid = ?", "depid");
		
		SqlAndParam s = SqlUtil.buildSql(p, queryparam);
		Page<Record> page = Db.paginate(Integer.valueOf(String
				.valueOf(queryparam.get("page"))), Integer.valueOf(String
				.valueOf(queryparam.get("rows"))), 
				"select a.* ",
				" from  fw_user a LEFT JOIN fw_user_dep b on a.id=b.userid where 1=1 " + s.getSql(), 
				s.getParam().toArray(new Object[0]));
		return page;
	}

	
	
}
